// DFS
1079. 单词搜索

给定一个二维网格和一个单词，找出该单词是否存在于网格中。

单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。

示例:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

给定 word = "ABCCED", 返回 true.
给定 word = "SEE", 返回 true.
给定 word = "ABCB", 返回 false.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        int m = board.size(), n = board[0].size(), k = word.size();
        vector<vector<int> > vis(m, vector<int>(n, 0));
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(dfs(i, j, m, n, board, vis, word, k, 0))
                    return true;
            }
        }
        return false;
    }
    int dfs(int row, int col, int m, int n, vector<vector<char>>& board, vector<vector<int> >& vis, string word, int k, int idx){
        if(idx == k) return 1;
        if(row<0 || row>=m || col<0 || col>=n || vis[row][col] || board[row][col]!=word[idx]) return 0;
        vis[row][col] = 1;
        if(dfs(row+1, col, m, n, board, vis, word, k, idx+1) ||
           dfs(row-1, col, m, n, board, vis, word, k, idx+1) ||
           dfs(row, col+1, m, n, board, vis, word, k, idx+1) ||
           dfs(row, col-1, m, n, board, vis, word, k, idx+1))
            return 1;
        vis[row][col] = 0;
        return 0;
    }
};
