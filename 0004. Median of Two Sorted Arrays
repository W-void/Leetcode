// 二分
1004. Median of Two Sorted Arrays

There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

 

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5

// 偷懒用了 sort 排序
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        vector<int> vt;
        double ans;
        int n1 = nums1.size(), n2 = nums2.size(), i;
        for(i=0; i<n1; i++)
            vt.push_back(nums1[i]);
        for(i=0; i<n2; i++)
            vt.push_back(nums2[i]);
        sort(vt.begin(), vt.end());
        n1 += n2;
        if(n1 & 1)
            ans = vt[n1/2];
        else
            ans = (vt[n1/2] + vt[n1/2-1]) / 2。0;
        return ans;
    }
};

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// 看答案写出来的二分法
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size(), n2 = nums2.size();
        if(n1 > n2){
            vector<int> temp = nums1; nums1 = nums2; nums2 = temp;
            swap(n1, n2);
        }
        int imin = 0, imax = n1, halflen = (n1 + n2 + 1) / 2; 
        //当总个数为奇数时，左半边的最大值是中位数，若halflen = (n1 + n2) / 2，则是右半边的最小值为中位数
        while(imin <= imax){
            int i = (imin + imax) / 2;
            int j = halflen - i;
            if(i < n1 && nums2[j-1] > nums1[i]) //nums1[n1]会越界，所以i<n1
                imin = i + 1;
            else if(i > 0 && nums2[j] < nums1[i-1]) //nums1[-1]会越界，所以i>0
                imax = i - 1;
            else{ // i,j is perfect
                // 左边最大值应在num1[i]的左边和num2[j]的左边取大者
                // 右边最小值应在num1[i]的右边和num2[j]的右边取小者
                // 再考虑i,j再边界的情况，左或右边没有元素
                int maxLeft = 0;
                if(i == 0) // 不存在nums1[i-1]
                    maxLeft = nums2[j-1];
                else if(j == 0) // 不存在nums2[j-1]
                    maxLeft = nums1[i-1];
                else  // 非边界情况下，左边最大值应该为nums1[i-1]和 nums2[j-1]取大者
                    maxLeft = max(nums1[i-1], nums2[j-1]);
                if((n1 + n2) & 1) //奇数就可以返回了
                    return maxLeft;
                
                int minRight = 0;
                if(i == n1) //不存在nums1[i]
                    minRight = nums2[j];
                else if(j == n2)  //不存在nums2[j]
                    minRight = nums1[i]; // 因为num2的长度大于等于num1,所以此时i一定取0
                else // 非边界情况
                    minRight = min(nums1[i], nums2[j]);
                return (minRight + maxLeft) / 2.0;
            }
        }
    }
};
