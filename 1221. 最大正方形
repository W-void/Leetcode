// 动规
1221. 最大正方形
题目描述提示帮助提交记录社区讨论阅读解答
随机一题
在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。

示例:

输入: 

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

输出: 4
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.empty())
            return 0;
        int row = matrix.size(), col = matrix[0].size();
        vector<vector<int> > dp(row+1, vector<int>(col+1, 0));
        int ans = 0;
        for(int i=1; i<=row; i++){
            for(int j=1; j<=col; j++){
                if(matrix[i-1][j-1] == '1'){
                    dp[i][j] = min(dp[i-1][j-1], min(dp[i][j-1], dp[i-1][j])) + 1;
                    ans = max(dp[i][j], ans);
                }
            }
        }
        return ans * ans; 
    }
};
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.empty())
            return 0;
        int row = matrix.size(), col = matrix[0].size();
        vector<int> dp(col+1, 0);
        int ans = 0, pre = 0;
        for(int i=1; i<=row; i++){
            for(int j=1; j<=col; j++){
                int tmp = dp[j];
                if(matrix[i-1][j-1] == '1'){
                    dp[j] = min(min(dp[j-1], pre), dp[j]) + 1;
                    ans = max(dp[j], ans);
                }
                else
                    dp[j] = 0;
                pre = tmp;
            }
        }
        return ans * ans; 
    }
};
