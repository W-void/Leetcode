
1116. 填充每个节点的下一个右侧节点指针




题目描述
评论 (57)
题解
提交记录
给定一个完美二叉树，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。

初始状态下，所有 next 指针都被设置为 NULL。
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() {}

    Node(int _val, Node* _left, Node* _right, Node* _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
// 递归
class Solution {
public:
    Node* connect(Node* root) {
        if(!root || !root->left) return root;
        root->left->next = root->right;
        if(root->next)
            root->right->next = root->next->left;
        connect(root->left);
        connect(root->right);
        return root;
    }
};
// 循环
class Solution {
public:
    Node* connect(Node* root) {
        if(!root) return root;
        Node *l = root, *nex;
        while(l->left){
            nex = l;
            while(nex){
                nex->left->next = nex->right;
                if(nex->next){
                    nex->right->next = nex->next->left;
                }
                nex = nex->next;               
            }
            l = l->left;
        }
        return root;
    }
};
