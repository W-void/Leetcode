// 链表归并排序
1148. Sort List

Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(head == NULL || head->next == NULL)
            return head;
        return mergeSort(head);
    }
    ListNode* mergeSort(ListNode* head){
        if(head->next == NULL) return head;
        // head至少有两个结点
        ListNode* mid = findMid(head);
        ListNode* mid_next = mid->next;
        mid->next = NULL;
        ListNode* first = mergeSort(head);
        ListNode* second = mergeSort(mid_next);
        return merge(first, second);
    }
    ListNode* findMid(ListNode* head){
        ListNode *fast = head->next, *slow = head;//fast = head会出错，因为当head有两个结点时，会返回第二个结点，从而陷入死循环
        while(fast && fast->next){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }    
    ListNode* merge(ListNode* first, ListNode* second){
        ListNode *head = new ListNode(0), *tail = head;
        while(first && second){
            if(first->val < second->val){
                tail->next = first;
                tail = first;
                first = first->next;
            }
            else{
                tail->next = second;
                tail = second;
                second = second->next;
            }
        }
        if(first)
            tail->next = first;
        else
            tail->next = second;
        
        return head->next;
    }
};
