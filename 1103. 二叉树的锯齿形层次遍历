
1103. 二叉树的锯齿形层次遍历

给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。

例如：
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回锯齿形层次遍历如下：

[
  [3],
  [20,9],
  [15,7]
]
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int> > ans;
        if(!root) return ans;
        
        queue<TreeNode*> Q;
        Q.push(root);
        int flag = 1; // 1是从左到右，-1是从右到左
        
        while(!Q.empty()){
            int size = Q.size();
            int idx = flag == 1 ? 0 : size - 1;
            
            vector<int> tmp(size, 0);
            for(int i=0; i<size; i++){
                TreeNode *node = Q.front();
                Q.pop();
                
                tmp[idx] = node->val;
                idx = idx + flag * 1; //更新下标
                
                // 左右子树入队
                if(node->left)
                    Q.push(node->left);
                if(node->right)
                    Q.push(node->right);
            }
            flag = -flag;
            ans.push_back(tmp);
        }
        return ans;
    }
};
