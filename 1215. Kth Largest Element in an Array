// 经典题目：找出前k大的数.我的方法是建立一个k个元素的最小堆，当堆满后，将新来的元素与堆顶元素比较，比堆顶元素大就替换堆顶元素。
// 也可以直接将原数组调整为最大堆，然后提出k次堆顶元素
1215. Kth Largest Element in an Array

Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Example 1:

Input: [3,2,1,5,6,4] and k = 2
Output: 5
Example 2:

Input: [3,2,3,1,2,4,5,5,6] and k = 4
Output: 4
Note: 
You may assume k is always valid, 1 ≤ k ≤ array's length.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
typedef struct heapNode* Heap;
struct heapNode{
    int* data;
    int size, capacity;
};
Heap buildHeap(int k){
    Heap heap = (Heap)malloc(sizeof(struct heapNode));
    heap->capacity = k;
    heap->size = 0;
    heap->data = (int*)malloc(sizeof(int)*(k+1));
    heap->data[0] = 1<<31;
    return heap;
}
void Insert(Heap heap, int x){
    if(heap->size < heap->capacity){
        int idx = ++heap->size;
        while(heap->data[idx/2] > x){
            heap->data[idx] = heap->data[idx/2];
            idx /= 2;
        }
        heap->data[idx] = x;
    }
    else{
        if(x <= heap->data[1]) return;
        int parent, child;
        for(parent = 1; parent*2 <= heap->capacity; parent = child){
            child = parent * 2;
            if(child < heap->size && heap->data[child] > heap->data[child+1])
                child++;
            if(x > heap->data[child])
                heap->data[parent] = heap->data[child];   
            else break;
        }
        heap->data[parent] = x;
    }
}
int findKthLargest(int* nums, int numsSize, int k) {
    Heap heap = buildHeap(k);
    int i = 0;
    while(i < numsSize)
        Insert(heap, nums[i++]);
    return heap->data[1];
}
