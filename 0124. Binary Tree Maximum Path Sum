1124. Binary Tree Maximum Path Sum

Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.

Example 1:

Input: [1,2,3]

       1
      / \
     2   3

Output: 6
Example 2:

Input: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

Output: 42

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int Max = 1<<31;
    int maxPathSum(TreeNode* root) {
        if(root == NULL) return 0;
        maxPath(root);
        return Max;
    }
    int maxPath(TreeNode* root){
        if(root == NULL) return 0;
        int l=maxPath(root->left);
        int r=maxPath(root->right);
        Max=max(Max,max(0,l)+max(0,r)+root->val); //Max中存的最大路径长度
        return max(0,max(l,r))+root->val; //返回以该结点为顶点的最大路径长度
    }
};
