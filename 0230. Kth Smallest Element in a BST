// 递归求BST中第k小元素，也可以中序遍历依次将结点值存储在数组中，然后输出第k个值即可
1230. Kth Smallest Element in a BST

Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note: 
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1
Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3
Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize 
the kthSmallest routine?

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        int n = count(root->left);
        if(n + 1 == k) return root->val;
        else if(n + 1 < k) return kthSmallest(root->right, k - n - 1);
        else return kthSmallest(root->left, k);
    }
    int count(TreeNode* root){
        if(root == NULL) return 0;
        else return count(root->left) + count(root->right) + 1;
    }
};
